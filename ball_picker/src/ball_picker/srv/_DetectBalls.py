"""autogenerated by genpy from ball_picker/DetectBallsRequest.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class DetectBallsRequest(genpy.Message):
  _md5sum = "5facb08d3f89b0b68128925c75a15357"
  _type = "ball_picker/DetectBallsRequest"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """bool balls

"""
  __slots__ = ['balls']
  _slot_types = ['bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       balls

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(DetectBallsRequest, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.balls is None:
        self.balls = False
    else:
      self.balls = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      buff.write(_struct_B.pack(self.balls))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      start = end
      end += 1
      (self.balls,) = _struct_B.unpack(str[start:end])
      self.balls = bool(self.balls)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      buff.write(_struct_B.pack(self.balls))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      start = end
      end += 1
      (self.balls,) = _struct_B.unpack(str[start:end])
      self.balls = bool(self.balls)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_B = struct.Struct("<B")
"""autogenerated by genpy from ball_picker/DetectBallsResponse.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import ball_picker.msg

class DetectBallsResponse(genpy.Message):
  _md5sum = "351e2ed9256d81e76d3541c56dde9465"
  _type = "ball_picker/DetectBallsResponse"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """ball_picker/Detections detections


================================================================================
MSG: ball_picker/Detections
int32 BALL=0      # Ball detection
int32 OTHERS=1    # Other objects detection
int32 type
ball_picker/PointOfInterest[] ballcenters

================================================================================
MSG: ball_picker/PointOfInterest
float64 x
float64 y

"""
  __slots__ = ['detections']
  _slot_types = ['ball_picker/Detections']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       detections

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(DetectBallsResponse, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.detections is None:
        self.detections = ball_picker.msg.Detections()
    else:
      self.detections = ball_picker.msg.Detections()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      buff.write(_struct_i.pack(self.detections.type))
      length = len(self.detections.ballcenters)
      buff.write(_struct_I.pack(length))
      for val1 in self.detections.ballcenters:
        _x = val1
        buff.write(_struct_2d.pack(_x.x, _x.y))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.detections is None:
        self.detections = ball_picker.msg.Detections()
      end = 0
      start = end
      end += 4
      (self.detections.type,) = _struct_i.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.detections.ballcenters = []
      for i in range(0, length):
        val1 = ball_picker.msg.PointOfInterest()
        _x = val1
        start = end
        end += 16
        (_x.x, _x.y,) = _struct_2d.unpack(str[start:end])
        self.detections.ballcenters.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      buff.write(_struct_i.pack(self.detections.type))
      length = len(self.detections.ballcenters)
      buff.write(_struct_I.pack(length))
      for val1 in self.detections.ballcenters:
        _x = val1
        buff.write(_struct_2d.pack(_x.x, _x.y))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.detections is None:
        self.detections = ball_picker.msg.Detections()
      end = 0
      start = end
      end += 4
      (self.detections.type,) = _struct_i.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.detections.ballcenters = []
      for i in range(0, length):
        val1 = ball_picker.msg.PointOfInterest()
        _x = val1
        start = end
        end += 16
        (_x.x, _x.y,) = _struct_2d.unpack(str[start:end])
        self.detections.ballcenters.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_i = struct.Struct("<i")
_struct_2d = struct.Struct("<2d")
class DetectBalls(object):
  _type          = 'ball_picker/DetectBalls'
  _md5sum = '1392111cd8a1b7423a5cb85c5feb5ea2'
  _request_class  = DetectBallsRequest
  _response_class = DetectBallsResponse
