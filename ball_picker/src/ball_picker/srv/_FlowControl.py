"""autogenerated by genpy from ball_picker/FlowControlRequest.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import ball_picker.msg

class FlowControlRequest(genpy.Message):
  _md5sum = "bfcfdb20543eac2cd65b3e01b4f54737"
  _type = "ball_picker/FlowControlRequest"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """ball_picker/FlowCommands flowcmd
bool state

================================================================================
MSG: ball_picker/FlowCommands
int32 QUERY=0          # State constant - query
int32 SEARCH=1         # State constant - searching for balls
int32 TURN=2           # State constant - turn robot around
int32 MOVETOBALL=3     # State constant - move towards ball
int32 PICKBALL=4       # State constant - pick the ball
int32 MOVETOSTORAGE=5  # State constant - move the ball towards the storage
int32 DROPBALL=6       # State constant - drop the ball
int32 flowid

"""
  __slots__ = ['flowcmd','state']
  _slot_types = ['ball_picker/FlowCommands','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       flowcmd,state

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(FlowControlRequest, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.flowcmd is None:
        self.flowcmd = ball_picker.msg.FlowCommands()
      if self.state is None:
        self.state = False
    else:
      self.flowcmd = ball_picker.msg.FlowCommands()
      self.state = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_iB.pack(_x.flowcmd.flowid, _x.state))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.flowcmd is None:
        self.flowcmd = ball_picker.msg.FlowCommands()
      end = 0
      _x = self
      start = end
      end += 5
      (_x.flowcmd.flowid, _x.state,) = _struct_iB.unpack(str[start:end])
      self.state = bool(self.state)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_iB.pack(_x.flowcmd.flowid, _x.state))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.flowcmd is None:
        self.flowcmd = ball_picker.msg.FlowCommands()
      end = 0
      _x = self
      start = end
      end += 5
      (_x.flowcmd.flowid, _x.state,) = _struct_iB.unpack(str[start:end])
      self.state = bool(self.state)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_iB = struct.Struct("<iB")
"""autogenerated by genpy from ball_picker/FlowControlResponse.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import ball_picker.msg

class FlowControlResponse(genpy.Message):
  _md5sum = "835692eaa194782f8b9d5c3abce96f90"
  _type = "ball_picker/FlowControlResponse"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """ball_picker/FlowCommands flowcmd


================================================================================
MSG: ball_picker/FlowCommands
int32 QUERY=0          # State constant - query
int32 SEARCH=1         # State constant - searching for balls
int32 TURN=2           # State constant - turn robot around
int32 MOVETOBALL=3     # State constant - move towards ball
int32 PICKBALL=4       # State constant - pick the ball
int32 MOVETOSTORAGE=5  # State constant - move the ball towards the storage
int32 DROPBALL=6       # State constant - drop the ball
int32 flowid

"""
  __slots__ = ['flowcmd']
  _slot_types = ['ball_picker/FlowCommands']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       flowcmd

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(FlowControlResponse, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.flowcmd is None:
        self.flowcmd = ball_picker.msg.FlowCommands()
    else:
      self.flowcmd = ball_picker.msg.FlowCommands()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      buff.write(_struct_i.pack(self.flowcmd.flowid))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.flowcmd is None:
        self.flowcmd = ball_picker.msg.FlowCommands()
      end = 0
      start = end
      end += 4
      (self.flowcmd.flowid,) = _struct_i.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      buff.write(_struct_i.pack(self.flowcmd.flowid))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.flowcmd is None:
        self.flowcmd = ball_picker.msg.FlowCommands()
      end = 0
      start = end
      end += 4
      (self.flowcmd.flowid,) = _struct_i.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_i = struct.Struct("<i")
class FlowControl(object):
  _type          = 'ball_picker/FlowControl'
  _md5sum = '8c8d7495cd0e7ff5ece0067b1bd3cc60'
  _request_class  = FlowControlRequest
  _response_class = FlowControlResponse
