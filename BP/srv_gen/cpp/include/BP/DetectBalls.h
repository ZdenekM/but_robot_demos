/* Auto-generated by genmsg_cpp for file /home/dprokopo/rosbuild_ws/sandbox/BP/srv/DetectBalls.srv */
#ifndef BP_SERVICE_DETECTBALLS_H
#define BP_SERVICE_DETECTBALLS_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"



#include "BP/Detections.h"

namespace BP
{
template <class ContainerAllocator>
struct DetectBallsRequest_ {
  typedef DetectBallsRequest_<ContainerAllocator> Type;

  DetectBallsRequest_()
  : balls(false)
  {
  }

  DetectBallsRequest_(const ContainerAllocator& _alloc)
  : balls(false)
  {
  }

  typedef uint8_t _balls_type;
  uint8_t balls;


  typedef boost::shared_ptr< ::BP::DetectBallsRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::BP::DetectBallsRequest_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct DetectBallsRequest
typedef  ::BP::DetectBallsRequest_<std::allocator<void> > DetectBallsRequest;

typedef boost::shared_ptr< ::BP::DetectBallsRequest> DetectBallsRequestPtr;
typedef boost::shared_ptr< ::BP::DetectBallsRequest const> DetectBallsRequestConstPtr;



template <class ContainerAllocator>
struct DetectBallsResponse_ {
  typedef DetectBallsResponse_<ContainerAllocator> Type;

  DetectBallsResponse_()
  : detections()
  {
  }

  DetectBallsResponse_(const ContainerAllocator& _alloc)
  : detections(_alloc)
  {
  }

  typedef  ::BP::Detections_<ContainerAllocator>  _detections_type;
   ::BP::Detections_<ContainerAllocator>  detections;


  typedef boost::shared_ptr< ::BP::DetectBallsResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::BP::DetectBallsResponse_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct DetectBallsResponse
typedef  ::BP::DetectBallsResponse_<std::allocator<void> > DetectBallsResponse;

typedef boost::shared_ptr< ::BP::DetectBallsResponse> DetectBallsResponsePtr;
typedef boost::shared_ptr< ::BP::DetectBallsResponse const> DetectBallsResponseConstPtr;


struct DetectBalls
{

typedef DetectBallsRequest Request;
typedef DetectBallsResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct DetectBalls
} // namespace BP

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::BP::DetectBallsRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::BP::DetectBallsRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::BP::DetectBallsRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "5facb08d3f89b0b68128925c75a15357";
  }

  static const char* value(const  ::BP::DetectBallsRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x5facb08d3f89b0b6ULL;
  static const uint64_t static_value2 = 0x8128925c75a15357ULL;
};

template<class ContainerAllocator>
struct DataType< ::BP::DetectBallsRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "BP/DetectBallsRequest";
  }

  static const char* value(const  ::BP::DetectBallsRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::BP::DetectBallsRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "bool balls\n\
\n\
";
  }

  static const char* value(const  ::BP::DetectBallsRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::BP::DetectBallsRequest_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::BP::DetectBallsResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::BP::DetectBallsResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::BP::DetectBallsResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "351e2ed9256d81e76d3541c56dde9465";
  }

  static const char* value(const  ::BP::DetectBallsResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x351e2ed9256d81e7ULL;
  static const uint64_t static_value2 = 0x6d3541c56dde9465ULL;
};

template<class ContainerAllocator>
struct DataType< ::BP::DetectBallsResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "BP/DetectBallsResponse";
  }

  static const char* value(const  ::BP::DetectBallsResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::BP::DetectBallsResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "BP/Detections detections\n\
\n\
\n\
================================================================================\n\
MSG: BP/Detections\n\
int32 BALL=0      # Ball detection\n\
int32 OTHERS=1    # Other objects detection\n\
int32 type\n\
BP/PointOfInterest[] ballcenters\n\
\n\
================================================================================\n\
MSG: BP/PointOfInterest\n\
float64 x\n\
float64 y\n\
\n\
";
  }

  static const char* value(const  ::BP::DetectBallsResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::BP::DetectBallsRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.balls);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct DetectBallsRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::BP::DetectBallsResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.detections);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct DetectBallsResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<BP::DetectBalls> {
  static const char* value() 
  {
    return "1392111cd8a1b7423a5cb85c5feb5ea2";
  }

  static const char* value(const BP::DetectBalls&) { return value(); } 
};

template<>
struct DataType<BP::DetectBalls> {
  static const char* value() 
  {
    return "BP/DetectBalls";
  }

  static const char* value(const BP::DetectBalls&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<BP::DetectBallsRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "1392111cd8a1b7423a5cb85c5feb5ea2";
  }

  static const char* value(const BP::DetectBallsRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<BP::DetectBallsRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "BP/DetectBalls";
  }

  static const char* value(const BP::DetectBallsRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<BP::DetectBallsResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "1392111cd8a1b7423a5cb85c5feb5ea2";
  }

  static const char* value(const BP::DetectBallsResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<BP::DetectBallsResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "BP/DetectBalls";
  }

  static const char* value(const BP::DetectBallsResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // BP_SERVICE_DETECTBALLS_H

