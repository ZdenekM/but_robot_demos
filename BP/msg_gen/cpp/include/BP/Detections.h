/* Auto-generated by genmsg_cpp for file /home/dprokopo/rosbuild_ws/sandbox/BP/msg/Detections.msg */
#ifndef BP_MESSAGE_DETECTIONS_H
#define BP_MESSAGE_DETECTIONS_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "BP/PointOfInterest.h"

namespace BP
{
template <class ContainerAllocator>
struct Detections_ {
  typedef Detections_<ContainerAllocator> Type;

  Detections_()
  : type(0)
  , ballcenters()
  {
  }

  Detections_(const ContainerAllocator& _alloc)
  : type(0)
  , ballcenters(_alloc)
  {
  }

  typedef int32_t _type_type;
  int32_t type;

  typedef std::vector< ::BP::PointOfInterest_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::BP::PointOfInterest_<ContainerAllocator> >::other >  _ballcenters_type;
  std::vector< ::BP::PointOfInterest_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::BP::PointOfInterest_<ContainerAllocator> >::other >  ballcenters;

  enum { BALL = 0 };
  enum { OTHERS = 1 };

  typedef boost::shared_ptr< ::BP::Detections_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::BP::Detections_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct Detections
typedef  ::BP::Detections_<std::allocator<void> > Detections;

typedef boost::shared_ptr< ::BP::Detections> DetectionsPtr;
typedef boost::shared_ptr< ::BP::Detections const> DetectionsConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::BP::Detections_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::BP::Detections_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace BP

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::BP::Detections_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::BP::Detections_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::BP::Detections_<ContainerAllocator> > {
  static const char* value() 
  {
    return "ca05d6b60fdc98a12a77e103e579b06f";
  }

  static const char* value(const  ::BP::Detections_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xca05d6b60fdc98a1ULL;
  static const uint64_t static_value2 = 0x2a77e103e579b06fULL;
};

template<class ContainerAllocator>
struct DataType< ::BP::Detections_<ContainerAllocator> > {
  static const char* value() 
  {
    return "BP/Detections";
  }

  static const char* value(const  ::BP::Detections_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::BP::Detections_<ContainerAllocator> > {
  static const char* value() 
  {
    return "int32 BALL=0      # Ball detection\n\
int32 OTHERS=1    # Other objects detection\n\
int32 type\n\
BP/PointOfInterest[] ballcenters\n\
\n\
================================================================================\n\
MSG: BP/PointOfInterest\n\
float64 x\n\
float64 y\n\
\n\
";
  }

  static const char* value(const  ::BP::Detections_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::BP::Detections_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.type);
    stream.next(m.ballcenters);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct Detections_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::BP::Detections_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::BP::Detections_<ContainerAllocator> & v) 
  {
    s << indent << "type: ";
    Printer<int32_t>::stream(s, indent + "  ", v.type);
    s << indent << "ballcenters[]" << std::endl;
    for (size_t i = 0; i < v.ballcenters.size(); ++i)
    {
      s << indent << "  ballcenters[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::BP::PointOfInterest_<ContainerAllocator> >::stream(s, indent + "    ", v.ballcenters[i]);
    }
  }
};


} // namespace message_operations
} // namespace ros

#endif // BP_MESSAGE_DETECTIONS_H

